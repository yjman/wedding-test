// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.wedding.domain;

import com.wedding.domain.Rsvp;
import com.wedding.domain.RsvpDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect RsvpDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RsvpDataOnDemand: @Component;
    
    private Random RsvpDataOnDemand.rnd = new SecureRandom();
    
    private List<Rsvp> RsvpDataOnDemand.data;
    
    public Rsvp RsvpDataOnDemand.getNewTransientRsvp(int index) {
        Rsvp obj = new Rsvp();
        setAttending(obj, index);
        setCode(obj, index);
        setConfirmed(obj, index);
        setEmail(obj, index);
        setSpecialRequests(obj, index);
        return obj;
    }
    
    public void RsvpDataOnDemand.setAttending(Rsvp obj, int index) {
        Integer attending = new Integer(index);
        obj.setAttending(attending);
    }
    
    public void RsvpDataOnDemand.setCode(Rsvp obj, int index) {
        String code = "code_" + index;
        if (code.length() > 30) {
            code = code.substring(0, 30);
        }
        obj.setCode(code);
    }
    
    public void RsvpDataOnDemand.setConfirmed(Rsvp obj, int index) {
        Date confirmed = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setConfirmed(confirmed);
    }
    
    public void RsvpDataOnDemand.setEmail(Rsvp obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 30) {
            email = email.substring(0, 30);
        }
        obj.setEmail(email);
    }
    
    public void RsvpDataOnDemand.setSpecialRequests(Rsvp obj, int index) {
        String specialRequests = "specialRequests_" + index;
        if (specialRequests.length() > 100) {
            specialRequests = specialRequests.substring(0, 100);
        }
        obj.setSpecialRequests(specialRequests);
    }
    
    public Rsvp RsvpDataOnDemand.getSpecificRsvp(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Rsvp obj = data.get(index);
        Long id = obj.getId();
        return Rsvp.findRsvp(id);
    }
    
    public Rsvp RsvpDataOnDemand.getRandomRsvp() {
        init();
        Rsvp obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Rsvp.findRsvp(id);
    }
    
    public boolean RsvpDataOnDemand.modifyRsvp(Rsvp obj) {
        return false;
    }
    
    public void RsvpDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Rsvp.findRsvpEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Rsvp' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Rsvp>();
        for (int i = 0; i < 10; i++) {
            Rsvp obj = getNewTransientRsvp(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
